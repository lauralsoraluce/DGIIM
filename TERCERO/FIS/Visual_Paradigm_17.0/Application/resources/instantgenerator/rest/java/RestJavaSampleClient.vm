## ===== Global =====
#if( $indentationLevel == "0" )
	#set( $indentationLevel = 0 )
#end
#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel) )
## ===== Output =====
$rest.package##
${baseIndentation}import java.io.*;
#if ($rest.method == "Get" || $rest.method == "Delete" || $rest.method == "Put")
${baseIndentation}import java.net.*;
${baseIndentation}import java.util.*;
${baseIndentation}import java.util.Map.Entry;
#end
${baseIndentation}import org.apache.http.*;
${baseIndentation}import org.apache.http.client.*;
${baseIndentation}import org.apache.http.client.methods.*;
${baseIndentation}import org.apache.http.entity.*;
${baseIndentation}import org.apache.http.impl.client.*;
${baseIndentation}import org.apache.http.util.*;

${baseIndentation}import com.google.gson.*;

${baseIndentation}public class ${rest.name}Client {
#if (($rest.method == "Get" || $rest.method == "Delete" || $rest.method == "Put") && $rest.parameters && !$rest.parameters.isEmpty())
${baseIndentation}${indentation}public static String toParameterString(Map<String, String> parameters) throws UnsupportedEncodingException {
${baseIndentation}${indentation}${indentation}StringBuilder buffer = new StringBuilder();
${baseIndentation}${indentation}${indentation}Iterator<Entry<String, String>> iterator = parameters.entrySet().iterator();
${baseIndentation}${indentation}${indentation}while (iterator.hasNext()) {
${baseIndentation}${indentation}${indentation}${indentation}Entry<String, String> entry = iterator.next();
${baseIndentation}${indentation}${indentation}${indentation}if (buffer.length() == 0) {
${baseIndentation}${indentation}${indentation}${indentation}${indentation}buffer.append("?");
${baseIndentation}${indentation}${indentation}${indentation}} else {
${baseIndentation}${indentation}${indentation}${indentation}${indentation}buffer.append("&");
${baseIndentation}${indentation}${indentation}${indentation}}
${baseIndentation}${indentation}${indentation}${indentation}buffer.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), "UTF-8"));
${baseIndentation}${indentation}${indentation}}
${baseIndentation}${indentation}${indentation}
${baseIndentation}${indentation}${indentation}return buffer.toString();
${baseIndentation}${indentation}}

#end
${baseIndentation}${indentation}public static void main(String[] args) throws IOException {
${baseIndentation}${indentation}${indentation}Gson gson = new GsonBuilder().create();
${baseIndentation}${indentation}${indentation}String urlString = "$baseUrl$rest.url";
#if ($rest.method == "Get" || $rest.method == "Delete" || $rest.method == "Put")
#if ($rest.parameters && !$rest.parameters.isEmpty())
${baseIndentation}${indentation}${indentation}Map<String, String> parameters = new HashMap<String, String>();
#foreach ($param in $rest.parameters)
${baseIndentation}${indentation}${indentation}parameters.put("${param.name}", "${param.example}");
#end
${baseIndentation}${indentation}${indentation}urlString += toParameterString(parameters);
#end
#end
${baseIndentation}${indentation}${indentation}CloseableHttpClient httpClient = HttpClients.createDefault();
${baseIndentation}${indentation}${indentation}try {
${baseIndentation}${indentation}${indentation}${indentation}Http${rest.method} httpMethod = new Http${rest.method}(urlString);
#if ($rest.method == "Post" || $rest.method == "Patch")
${baseIndentation}${indentation}${indentation}${indentation}httpMethod.setHeader("Content-Type", "application/json");
${baseIndentation}${indentation}${indentation}${indentation}httpMethod.setHeader("charset", "utf-8");
#if ($rest.requestClass)
${baseIndentation}${indentation}${indentation}${indentation}httpMethod.setEntity(new StringEntity(gson.toJson(createRequest())));
#end
#end
${baseIndentation}${indentation}${indentation}${indentation}ResponseHandler<Void> responseHandler = new ResponseHandler<Void>() {
${baseIndentation}${indentation}${indentation}${indentation}${indentation}@Override
${baseIndentation}${indentation}${indentation}${indentation}${indentation}public Void handleResponse(final HttpResponse response) throws ClientProtocolException, IOException {
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}int status = response.getStatusLine().getStatusCode();
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}HttpEntity entity = response.getEntity();
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}String result = entity != null ? EntityUtils.toString(entity) : null;
#if (!$rest.statuses.isEmpty())
#foreach ($status in $rest.statuses)
#if ($velocityCount == 1)
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}if (status == $status) {
#else
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}} else if (status == $status) {
#end
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${indentation}${rest.getResponseClass($status)} $utilities.getVariable(${rest.getResponseClass($status)}) = gson.fromJson(result, ${rest.getResponseClass($status)}.class);
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${indentation}// TODO process result
#end
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}} else {
#if ($rest.responseClass)
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${indentation}${rest.responseClass} $utilities.getVariable(${rest.responseClass}) = gson.fromJson(result, ${rest.responseClass}.class);
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${indentation}// TODO process result
#else
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${indentation}throw new ClientProtocolException("Unexpected response status: " + status);
#end
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}}
#else
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}${rest.responseClass} $utilities.getVariable(${rest.responseClass}) = gson.fromJson(result, ${rest.responseClass}.class);
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}// TODO process result
#end
${baseIndentation}${indentation}${indentation}${indentation}${indentation}${indentation}return null;
${baseIndentation}${indentation}${indentation}${indentation}${indentation}}
${baseIndentation}${indentation}${indentation}${indentation}};
${baseIndentation}${indentation}${indentation}${indentation}httpClient.execute(httpMethod, responseHandler);
${baseIndentation}${indentation}${indentation}} finally {
${baseIndentation}${indentation}${indentation}${indentation}httpClient.close();
${baseIndentation}${indentation}${indentation}}
${baseIndentation}${indentation}}
#if (($rest.method == "Post" || $rest.method == "Patch") && $rest.requestClass)

${baseIndentation}${indentation}private static $rest.requestClass createRequest() {
${baseIndentation}${indentation}${indentation}$rest.requestClass $utilities.getVariable(${rest.requestClass}) = new ${rest.requestClass}();
${baseIndentation}${indentation}${indentation}// TODO prepare request data

${baseIndentation}${indentation}${indentation}return $utilities.getVariable(${rest.requestClass});
${baseIndentation}${indentation}}
#end
${baseIndentation}}