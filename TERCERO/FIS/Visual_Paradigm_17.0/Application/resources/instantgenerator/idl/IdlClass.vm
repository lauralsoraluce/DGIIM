$class.t_prepare()##
## ===== Global =====
#if( $indentationLevel == "0" )
	#set( $indentationLevel = 0 )
#end
#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel) )
## ===== Output =====
#ifndef $class.t_getDefinitionName()
#define $class.t_getDefinitionName()

#if( $class.t_importClassesCount() > 0 )
	#foreach( $clsImportClass in $class.t_getImportClasses() )
		\#include "$clsImportClass.t_getFileFullName()#**#.idl"
	#end
	
#end
#set( $clsPossiblePackage = "" )
#set( $clsPreviousPossiblePackage = "" )
#foreach( $clsImportClass in $class.t_getForwardDecrationClasses($clsPossiblePackage) )
	$clsImportClass.t_prepare()##
	$baseIndentation##
	$clsImportClass.t_getTypeName() $clsImportClass.getName();
#end
#if( $clsPossiblePackage == $class.t_getFullPackage() )
	#if( !$class.t_isEnum() && !$class.isException() )
		$baseIndentation##
		$class.t_getTypeName() $class.getName();
	#end
#end
#foreach( $clsPossiblePackage in $class.t_getForwardDecrationPackages() )
	#set( $clsCurrentPackageLevel = $utilities.getPackageLevel($clsPossiblePackage) )
	#set( $clsPreviousPackageLevel = $utilities.getPackageLevel($clsPreviousPossiblePackage) )
	#set( $clsSamePackage = $utilities.getSamePackage($clsPreviousPossiblePackage, $clsPossiblePackage) )
	#set( $clsSamePackageLevel = $utilities.getPackageLevel($clsSamePackage) )
	#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel, $clsCurrentPackageLevel, -1) )
	## Close previous package
	#if( $clsPreviousPackageLevel > $clsSamePackageLevel )
		#set( $clsPreviousPackageLevel = $clsPreviousPackageLevel - 1 )
		#foreach( $clsClosingPreviousPackageLevel in [$clsPreviousPackageLevel..$clsSamePackageLevel] )
			#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel, $clsClosingPreviousPackageLevel) )
			$baseIndentation};
		#end
	#end
	## Open working package
	#if( $clsPossiblePackage.startsWith( $clsPreviousPossiblePackage ) )
		## Working package inside previous working package
		${baseIndentation}module $utilities.getLastPackage($clsPossiblePackage) {
	#else
		## Working package outside previous working package
		#set( $clsPossiblePackagePart = $utilities.toPackagePart($clsPossiblePackage) )
		#foreach( $clsOpeningPackageLevel in [$clsSamePackageLevel..$clsCurrentPackageLevel] )
			#if( $clsOpeningPackageLevel < $clsCurrentPackageLevel )
				#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel, $clsOpeningPackageLevel) )
				${baseIndentation}module $clsPossiblePackagePart.get($clsOpeningPackageLevel) {
			#end
		#end
	#end
	## Predefine import classes
	#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel, $clsCurrentPackageLevel) )
	#foreach( $clsImportClass in $class.t_getForwardDecrationClasses($clsPossiblePackage) )
		$baseIndentation##
		$clsImportClass.t_getTypeName() $clsImportClass.getName();
	#end
	## Predefine self
	#if( $clsPossiblePackage == $class.t_getFullPackage() )
		#if( !$class.t_isEnum() && !$class.isException() )
			$baseIndentation##
			$class.t_getTypeName() $class.getName();
		#end
	#end
	#set( $clsPreviousPossiblePackage = $clsPossiblePackage )
#end
## Close previous package
#set( $clsPreviousPackageLevel = $utilities.getPackageLevel($clsPreviousPossiblePackage) )
#if( $clsPreviousPackageLevel > 0 )
	#foreach( $clsClosingPreviousPackageLevel in [$clsPreviousPackageLevel..1] )
		#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel, $clsClosingPreviousPackageLevel, -1) )
		$baseIndentation};
	#end
#end

#foreach( $package in $class.t_packageIterator() )
	${baseIndentation}module $package {
	#set( $baseIndentation = "$baseIndentation$indentation" )
	#set( $indentationLevel = $indentationLevel + 1 )
#end
$class.t_getDocumentation($baseIndentation)##
${baseIndentation}$class.t_getAbstract()$class.t_getTypeName() $class.getName() $class.t_getGeneralizationRealization(){
#if( $class.attributeCount() > 0 )
	#foreach( $attribute in $class.attributeIterator() )
		#if( $class.isInterface() == false || $attribute.t_getScope().equals("static ") )
			#parse("$template-dir/IdlAttribute.vm")

		#end
	#end
#end
#if( $class.operationCount() > 0 )
	#foreach( $operation in $class.operationIterator() )
		#parse("$template-dir/IdlOperation.vm")

	#end
#end
$baseIndentation};
#foreach( $package in $class.t_packageIterator() )
	#set( $indentationLevel = $indentationLevel - 1 )
	#set( $baseIndentation = $utilities.getIndentation($indentation, $indentationLevel) )
	$baseIndentation};
#end

#endif