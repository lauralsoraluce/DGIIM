<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema 
		targetNamespace="http://www.visual-paradigm.com/2015/DocComposer"
		xmlns:rw="http://www.visual-paradigm.com/2015/DocComposer"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	
	<!-- ROOT -->
	
	<!-- BaseInitiation-->
	<xsd:element name="AnyBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>
				Starts working on current object (no changed).
				This is used for the Included, Inlined or Referenced template that which no need/impossible to define a InitiationBlock. (Because impossible to know what is the working object)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="saveModelAsComposite" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The generated content will be stored in one model element.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ElementBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>
				Starts working on Model Element.
				Also can be used to change active source to ModelElement from DiagramElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="saveModelAsComposite" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The generated content will be stored in one model element.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>Starts working on Diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
				<xsd:annotation>
					<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="saveModelAsComposite" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The generated content will be stored in one model element.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramElementBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>Starts working on Diagram Element.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="saveModelAsComposite" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The generated content will be stored in one model element.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ProjectBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>
				Starts working on Project.
				Also can be used to change active source to Project from any Diagram/DiagramElement/ModelElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="saveModelAsComposite" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The generated content will be stored in one model element.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	
	<!-- CONTENTS -->
	
	<!-- Breaks, Text -->
	<xsd:element name="ParagraphStyle">
		<xsd:annotation>
			<xsd:documentation>Apply a paragraph-style to coming contents.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="name" type="xsd:string" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>The name of the paragraph-style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ParagraphBreak">
		<xsd:annotation>
			<xsd:documentation>Insert a Paragraph Break.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="PageBreak">
		<xsd:annotation>
			<xsd:documentation>Insert a Page Break.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Text">
		<xsd:annotation>
			<xsd:documentation>Insert a hard-code text.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType mixed="true">
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional" default="unspecified">
				<xsd:annotation>
					<xsd:documentation>
						Whether the contents have rtl (right-to-left) characteristics.
						
						PS: 
						this option is only supported in WORD document.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="unspecified"/>
						<xsd:enumeration value="ltr"/>
						<xsd:enumeration value="rtl"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Numbering Level' of the paragraph. (Its Paragraph Style is required to refer a Numbering Style.)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="href" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>The text will be shown as a hyperlink with specified href.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hyperlink" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>The text will be shown as a hyperlink. This attribute will be ignored if href is defined.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isWordFieldCode" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						The text is a Field Code in Word (WORD only, no effect on PDF/HTML). 
						The generated content will show the source code of this field code only, please perform "Update Field" on the .docx file.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNext" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Make sure that, this item will be shown in same page with next item. (Used for Preview, and WORD document only)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInWord" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInPreview" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					'Margin' of the paragraph. the measureUnit is pixel.
					format: {top}, {right}, {bottom}, {left}
					e.g. 10, 0, 10, 0 (top/bottom = 10px, left/right = 0px)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-top" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>'Top Margin' of the paragraph. the measureUnit is pixel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-right" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>'Right Margin' of the paragraph. the measureUnit is pixel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-bottom" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>'Bottom Margin' of the paragraph. the measureUnit is pixel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-left" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>'Left Margin' of the paragraph. the measureUnit is pixel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- FreeStylePage, FreeStyleHtmlText, FreeStyleImage -->
	<xsd:element name="FreeStylePage">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style Page into document</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element minOccurs="0" maxOccurs="unbounded" ref="rw:FreeStyleHtmlText"/>
				<xsd:element minOccurs="0" maxOccurs="unbounded" ref="rw:FreeStyleImage"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="FreeStyleHtmlText">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style HTML text into Free Style Page</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Content of this FreeStyleHtmlText. It is in HTML Format.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:attribute name="x" type="rw:measureUnit" use="required">
						<xsd:annotation>
							<xsd:documentation>x-location of this FreeStyleHtmlText</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="y" type="rw:measureUnit" use="required">
						<xsd:annotation>
							<xsd:documentation>y-location of this FreeStyleHtmlText</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="width" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation>
								Width of this FreeStyleHtmlText
								'type' must be rw:measureUnit or string represents in percentage of the usable width of the page (e.g. width="15500" or width="100%")
								such as you want to show a Text in Center of Page, 
								You can set width="100%", and specify align="center" in the HTML content.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="height" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation>
								Height of this FreeStyleHtmlText
								'type' must be rw:measureUnit or string represents in percentage of the usable height of the page (e.g. height="15500" or height="100%")
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="FreeStyleImage">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style Image into Free Style Page</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="x" type="rw:measureUnit" use="required">
				<xsd:annotation>
					<xsd:documentation>x-location of this FreeStyleHtmlText</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="y" type="rw:measureUnit" use="required">
				<xsd:annotation>
					<xsd:documentation>y-location of this FreeStyleHtmlText</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="filePath" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The absolute file path of the image. (The image will be embedded into .vpp)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- TableOfContents -->
	<xsd:element name="TableOfContents">
		<xsd:annotation>
			<xsd:documentation>Insert a Table of Content</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="maxLevel" type="xsd:positiveInteger" use="optional" default="3">
				<xsd:annotation>
					<xsd:documentation>Maximum level will be included in TOC.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="levelStyles" type="rw:strings" use="optional" default="Heading 1 (VP), Heading 2 (VP), Heading 3 (VP), Column header 1, Row caption 1">
				<xsd:annotation>
					<xsd:documentation>
						Ordered Styles will be included in TOC.
						e.g. 
						levelStyles="Heading1, Heading2, Heading3, Heading4, Heading5, Heading6"
						means
						Heading1..6 will be included in TOC.
						and since maxLevel=3, so, finally, only Heading1, Heading2, and Heading3 is shown.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="title" type="xsd:string" use="optional" default="Table of Contents">
				<xsd:annotation>
					<xsd:documentation>Title caption of the TOC.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="titleStyle" type="xsd:string" use="optional" default="TOC Title">
				<xsd:annotation>
					<xsd:documentation>Style of the title caption.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowStyles" type="rw:strings" use="optional" default="TOC Level 1, TOC Level 2, TOC Level 3, TOC Level 4, TOC Level 5">
				<xsd:annotation>
					<xsd:documentation>
						Style of TOC rows.
						e.g. 
						levelStyles="Heading1, Heading2, Heading3"
						rowStyles="BoldStyle, ItalicStyle, UnderlineStyle"
						(assume BoldStyle, ItalicStyle, UnderlineStyle are styles defined in the document)
						then 
						the Heading1's caption will be shown in BoldStyle
						the Heading2's caption will be shown in ItalicStyle
						the Heading3's caption will be shown in UnderlineStyle
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- Table -->
	<xsd:element name="TableBlock">
		<xsd:annotation>
			<xsd:documentation>Insert a Table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element ref="rw:TableRow" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:ControlElements"/>
			</xsd:choice>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
					Width of table.
					4 kinds of 'type' supported: %, cm, mm, px
					e.g. 100%, 15cm, 150mm, 400px(pixel)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="firstColumnWidth" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Width of first table column.
					4 kinds of 'type' supported: %, cm, mm, px
					e.g. 100%, 15cm, 150mm, 400px(pixel)
					
					When mixed with colWidths. The 1st value of colWidths will be overridden by firstColumnWidth.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Column(s)' width of the table.
					@colWidths is relative to @tableWidth. 
					For example,  tableWidth="15000" colWidths="10, 20, 70", finally the columns widths will be: 
					1500 (15000*10/(10+20+70))
					3000 (15000*20/(10+20+70))
					10500  (15000*70/(10+20+70))
					
					When mixed with firstColumnWidth. The 1st value of colWidths will be overridden by firstColumnWidth.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="generateHeaderOnNewPage" use="optional" default="unspecified">
				<xsd:annotation>
					<xsd:documentation>
					@Deprecated It support in Report Writer only (not in Doc. Composer).
					For Doc. Composer please use Document Option "Repeat Table Header"
					
					Generate the header (the first row of this table) again if this table is generated across multiple pages.
					If working on Report Writer, "unspecified" means "false".
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="unspecified"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="repeatTableHeader" use="optional" default="followOption">
				<xsd:annotation>
					<xsd:documentation>Repeat 'Table Header (first row)' of table.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
						<xsd:enumeration value="followOption">
							<xsd:annotation>
								<xsd:documentation>follow the "Repeat Table Header" option in Doc Composer's Options dialog.</xsd:documentation>
							</xsd:annotation>
						</xsd:enumeration>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="singlePage" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Ensure the whole table won't be split in 2 or more pages.
					
					Effects on Preview/WORD. (no effect on PDF/HTML)
					
					If the table height is bigger than one page height:
						on 'WORD', singlePage will become no effect.  
						on 'Preview', the table content will be 'cropped'.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TableRow">
		<xsd:annotation>
			<xsd:documentation>Insert a Row into the table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element ref="rw:TableCell" minOccurs="0" maxOccurs="unbounded"/>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:ControlElements"/>
			</xsd:choice>
			<xsd:attribute name="height" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Height' of the row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isExactHeight" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>'At least' height, or 'Exact' height. (WORD only, no effect on PDF/HTML)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="backgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="singlePage" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Ensure the whole row won't be split in 2 or more pages.
					
					Effects on WORD/PDF/Preview. (no effect on HTML)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TableCell">
		<xsd:annotation>
			<xsd:documentation>Insert a Cell into the row.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="topBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Top Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="bottomBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Bottom Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="leftBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Left Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rightBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Right Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="verticalAlignment" use="optional">
				<xsd:annotation>
					<xsd:documentation>Vertical Alignment of the cell.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="top"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="bottom"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="color" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the cell.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="mergeColumns" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated. Replaced by @colspan.
					
					Zero base. mergeColumns="1" means this cell consumes the next column, same as colspan="2". 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colspan" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Colspan' of the cell.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Iteration, retrieve a list of values 
	(
		IterationBlock(ConditionChecker), ForEach(ConditionChecker), 
		ForEachRelationship(ConditionChecker), ForEachSimpleRelationship(ConditionChecker), ForEachEndRelationship(ConditionChecker), ForEachRelationshipEnd(ConditionChecker), 
		ForEachSubDiagram(ConditionChecker), ForEachOwnerDiagram(ConditionChecker), ForEachDiagram(ConditionChecker), ForEachDiagramElement(ConditionChecker), 
		ForEachPostManiaPost(ConditionChecker)
	)
	-->
	<xsd:element name="Sortings">
		<xsd:annotation>
			<xsd:documentation>
				Sorting setting of IterationBlock, ForEach, etc...
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Sorting" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:attribute name="by" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>
								Sort by following option:
								name | type/modelType/diagramType | property | level | businessProcessFlow
								
								name : sort by name
								type : sort by type (type of model element or diagram)
								property: sort by property, requires defining @property, @sortValues, @defaultPropertyValue
								level: sort by parent-child
								businessProcessFlow: 
									sorting the BPD elements by the ordering in BPD (calculated by their ordering in sequence/message flow).
									ONLY AVIALABLE for sorting Diagram Elements in a BPD
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="property" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>If @by="property", @property is required to specified sort by which property.</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="sortValues" type="rw:strings" use="optional">
							<xsd:annotation>
								<xsd:documentation>
								If @by="property"", @sortValues can be specified for sorting by values of the property.
								
								e.g. 
									@by="property" @property="visibility" @sortValues="public, protected, private"
									means 'public' model elements will be before 'protected' model elements, 'protected' will be before 'private'
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>If @by="property", @defaultPropertyValue can be specified for the default value of the model element which has no this property value.</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="dateFormatString" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>
									Date value property will be formatted with the format pattern specified before sorting. Formatting will only occur when the property is a date value (e.g. pmLastModified).
									e.g. @dateFormatString ="yyyy-MM-dd"
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="descending" type="xsd:boolean" use="optional">
							<xsd:annotation>
								<xsd:documentation>
								Sorting in descending order?
								default value will be equals to @defaultDescending of Sortings
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="noSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Disable the 'default sorting'.
						
						Elements will be sorted in alphabetical order by default. Please mark this flag to TRUE to disable this sorting.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultDescending" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Default descending of the Sorting(s). 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="Conditions">
		<xsd:annotation>
			<xsd:documentation>
				Conditions defined for IterationBlock, ForEach, etc...
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:ConditionChecker"/>
				<xsd:element minOccurs="0" maxOccurs="unbounded" ref="rw:Conditions"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the property value is default value.
					@flag=false
						means the nodes will be executed if the property value is not default value.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" use="optional" default="and">
				<xsd:annotation>
					<xsd:documentation>
					"and" all ConditionCheckers match. 
					"or" any one of ConditioNCheckers match.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="and"/>
						<xsd:enumeration value="AND"/>
						<xsd:enumeration value="or"/>
						<xsd:enumeration value="OR"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	
	<xsd:complexType name="IterationBlockType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter children by modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter children by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="stereotypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter children by stereotypes.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter children by name.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="filterHidden" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>
				Filter hidden children DiagramElements.
				For retrieving from Diagram/DiagramElement only.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="includeConnectors" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>
				Retrieve Shape or Shape+Connector from Diagram?
				For retrieving from Diagram only.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="suppressDuplicatedModelElement" type="xsd:boolean" use="optional" default="true">
			<xsd:annotation>
				<xsd:documentation>
				Ignore the 2nd or later shapes, that, its model element is already included in retrieving from the 1st shape of the model element.
				For retrieving from Diagram only.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="allLevel" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>
				Retrieve all ModelElements of the project? Otherwise, only the "root level model elements (model elements have no parent model)" will be retrieved.
				For retrieving from Project only.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>
				Ignore the last 'separator' on the last value of the loop.
				'separator' may be ParagraphBreak or Text. 
				
				May ignore Text because the Text.content may be "\n" or ", " that used as a delimiter.
				e.g. IterationBlock > modelElement.name + ", " 
				where, don't need append ", " on the last modelElement.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Insert a string on every value of the loop. Besides the last value.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Deprecated, Replaced by Sortings element.
				
				Sort by following option (or combination of the options):
				name | modelType | property
				
				e.g. 
				@sortBys="name" 
					means sort by name.
				@sortBys="modelType, name"
					means sort by modelType first, then sort by name if same modelType.
				@sortBys="modelType, property, name" @sortProperty="visibility"
					means sort by modelType first, then sort by visibility if same modelType, then sort by name if same modelType+same visibility.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Deprecated, Replaced by Sortings element.
				
				If sort by 'property' on @sortBys, @sortProperty is required to specified sort by which property.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Deprecated, Replaced by Sortings element.
				
				If sort by property, @sortValues can be specified for sort by values of the property.
				
				e.g. 
				@sortBys="property" @sortProperty="visibility" @sortValues="public, protected, private"
					means 'public' model elements will be before 'protected' model elements, 'protected' will be before 'private'
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Deprecated, Replaced by Sortings element.
				
				If sort by property, @defaultPropertyValue can be specified for the default value of the model has no this property value.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Deprecated, Replaced by Sortings element.
				
				Sorting in descending order?
				
				The numbers of descendingSorts should be same as sortBys (N values in @sortBys, requires N values in @descendingSorts)
				e.g. 
				@sortBys="name, modelType" @descendingSorts="true, false"
					means sort by name will be descending, sort by modelType will be ascending.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="IterationBlock">
		<xsd:annotation>
			<xsd:documentation>
			Retrieve children from Project/ModelElement/Diagram/DiagramElement.
			If active source is Project or ModelElement, its children ModelElements will be retrieved.
			If active source is Diagram or DiagramElement, its children DiagramElements will be retrieved.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:IterationBlockType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="IterationBlockConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:IterationBlockType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="property" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Retrieve from which proprety.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEach">
		<xsd:annotation>
			<xsd:documentation>Retrieve ModelElements (value of the property) from ModelElement's property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachRelationshipType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="direction" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationship by direction.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="all"/>
					<xsd:enumeration value="from"/>
					<xsd:enumeration value="to"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachRelationship">
		<xsd:annotation>
			<xsd:documentation>Retrieve SimpleRelationship+EndRelationship from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachRelationshipConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachSimpleRelationshipType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="direction" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationship by direction.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="all"/>
					<xsd:enumeration value="from"/>
					<xsd:enumeration value="to"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachSimpleRelationship">
		<xsd:annotation>
			<xsd:documentation>Retrieve SimpleRelationship from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachSimpleRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachSimpleRelationshipConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachSimpleRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachEndRelationshipType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="direction" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter relationship by direction.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="all"/>
					<xsd:enumeration value="from"/>
					<xsd:enumeration value="to"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachEndRelationship">
		<xsd:annotation>
			<xsd:documentation>Retrieve EndRelationship from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachEndRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachEndRelationshipConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachEndRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachRelationshipEndType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Filter RelationshipEnds by modelType.
				where, modelType can be EndRelationship or RelationshipEnd's model type.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>
				Filter relationship ends by modelTypes. If @modelType is defined, @modelTypes will be ignored.
				where, modelType can be EndRelationship or RelationshipEnd's model type.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="endPointer" use="optional" default="self">
			<xsd:annotation>
				<xsd:documentation>
				Getting which End of the EndRelationship.
				self = the side connected with THIS model element.
				other = the side connected with OPPOSITE model element.
				both = both sides of this relationship.
				
				PS: different to ForEachSimpleRelationship.direction. this .endPointer must getting the Ends from From/To relationships.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:NMTOKEN">
					<xsd:enumeration value="both"/>
					<xsd:enumeration value="self"/>
					<xsd:enumeration value="other"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachRelationshipEnd">
		<xsd:annotation>
			<xsd:documentation>Retrieve RelationshipEnd from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachRelationshipEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachRelationshipEndConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachRelationshipEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachSubDiagramType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="diagramType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachSubDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve sub diagrams from ModelElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachSubDiagramType">
					<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
						<xsd:annotation>
							<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachSubDiagramConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachSubDiagramType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachOwnerDiagramType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="diagramType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachOwnerDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve owner diagrams, which the ModelElement is shown on.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachOwnerDiagramType">
					<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
						<xsd:annotation>
							<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachOwnerDiagramConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachOwnerDiagramType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachDiagramType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="diagramType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="property" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Get value from which model element property.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve diagrams from Project or from Model Element's property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachDiagramType">
					<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
						<xsd:annotation>
							<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachDiagramConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the models from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachDiagramType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachDiagramElementType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="property" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Retrieve from which proprety.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachDiagramElement">
		<xsd:annotation>
			<xsd:documentation>Retrieve DiagramElements (value of the property) from ModelElement's property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachDiagramElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachDiagramElementConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the diagram elements from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachDiagramElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ForEachPostManiaPostType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="rw:Sortings" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="breakString" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortBys" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sortValues" type="rw:strings" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
			<xsd:annotation>
				<xsd:documentation>Deprecated. Replaced by Sortings element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ForEachPostManiaPost">
		<xsd:annotation>
			<xsd:documentation>Retrieve PostMania Posts from Diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachPostManiaPostType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachPostManiaPostConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the posts from this iteration.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ForEachPostManiaPostType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<!--
	 Conditional, if condition not match, the template node(s) under the condition won't be executed.
	 (
	 ConditionsCheckers, 
	 DefaultValueChecker, ValueChecker, HasValueChecker, HasChildElementChecker, HasParentModelChecker, HasParentShapeChecker, HasRelationshipChecker, 
	 HasDiagramChecker
	 )
	 -->
	<xsd:element name="ConditionsChecker">
		<xsd:annotation>
			<xsd:documentation>
				Combination of ConditionChecker(s), for supporting AND/OR on the conditions.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
				<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the property value is default value.
					@flag=false
						means the nodes will be executed if the property value is not default value.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DefaultValueChecker">
		<xsd:annotation>
			<xsd:documentation>Check property value equals to its default value.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the property value is default value.
					@flag=false
						means the nodes will be executed if the property value is not default value.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ValueChecker">
		<xsd:annotation>
			<xsd:documentation>Check property value match with an expected value.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="operator" use="optional" default="equals">
				<xsd:annotation>
					<xsd:documentation>
					"equal" is Deprecated. Replaced by "equals"
					"not equal" is Deprecated. Replaced by "not equals"
					
					"equals", "not equals" for string/int/boolean/model property
					"less than", "equals or less than", "greater than", "equals or greater than" for string/int property
					"like", "not like" for string property
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="equals"/>
						<xsd:enumeration value="EQUALS"/>
						<xsd:enumeration value="not equals"/>
						<xsd:enumeration value="NOT EQUALS"/>
						<xsd:enumeration value="less than"/>
						<xsd:enumeration value="LESS THEN"/>
						<xsd:enumeration value="equals or less than"/>
						<xsd:enumeration value="EQUALS OR LESS THAN"/>
						<xsd:enumeration value="greater than"/>
						<xsd:enumeration value="GREATER THAN"/>
						<xsd:enumeration value="equals or greater than"/>
						<xsd:enumeration value="EQUALS OR GREATER THAN"/>
						<xsd:enumeration value="like"/>
						<xsd:enumeration value="LIKE"/>
						<xsd:enumeration value="not like"/>
						<xsd:enumeration value="NOT LIKE"/>
						<xsd:enumeration value="equal"/>
						<xsd:enumeration value="EQUAL"/>
						<xsd:enumeration value="not equal"/>
						<xsd:enumeration value="NOT EQUAL"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="value" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>The expected value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="var" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>A variable name (refer to SetVar.name). Specify the expected value from this variable's value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="length" type="xsd:int" use="optional">
				<xsd:annotation>
					<xsd:documentation>Check length of property value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="caseSensitive" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Case sensitive/insensitive for string property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="regularExpression" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Matching the value by regular expression if operator is "like" or "not like".</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="dateFormatString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						Date value property will be formatted with the format pattern specified before checking. Formatting will only occur when the property is a date value (e.g. pmLastModified).
						e.g. @dateFormatString ="yyyy-MM-dd"
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="id" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The ID of this ValueConditionChecker, it is used for HasChildElementChecker.valueConditionCheckerId.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasValueChecker">
		<xsd:annotation>
			<xsd:documentation>
				Checking does the property has value defined or not.
				
				Also can be used to replace ValueConditionChecker @property=... @operator=not equals @value=(empty)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the ModelElement.
					@flag=false
						means the nodes will be executed if property does not refer to the ModelElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter the value (model element) by a model type.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter the value (model element) by an expected value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="stereotypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter the value (model element) by stereotypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasChildElementChecker">
		<xsd:annotation>
			<xsd:documentation>Checking have children ModelElements of ModelElement. Or children DiagramElements of DiagramElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the parent have children.
					@flag=false
						means the nodes will be executed if the parent have no children.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="stereotypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by stereotypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeConnectors" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve Shape or Shape+Connector from Diagram?
					For retrieving from Diagram only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="filterHidden" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Don't include the hidden-shape</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="allLevel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve all ModelElements of the project? Otherwise, only the "root level model elements (model elements have no parent model)" will be retrieved.
					For retrieving from Project only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="valueConditionCheckerId" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The ValueConditionChecker's id. Used to find out that ValueConditionChecker to check with children. 
						If the NO any one of the children matching with that ValueConditionChecker, this HasChildElementChecker will become NOT match.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasParentModelChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement, DiagramElement, or Diagram) have parent ModelElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have parent model element.
					@flag=false
						means the nodes will be executed if have no parent model element.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasParentShapeChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (DiagramElement) have parent DiagramElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have parent diagram element.
					@flag=false
						means the nodes will be executed if have no parent diagram element.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="shapeType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the shapeType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasRelationshipChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement or DiagramElement) have relationship (Relationship or Connector) or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have relationship.
					@flag=false
						means the nodes will be executed if have no relationship.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional" default="all">
				<xsd:annotation>
					<xsd:documentation>
					self_begins, self_ends are Deprecated.
					self_begins = from
					self_ends = to
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="all"/>
						<xsd:enumeration value="from"/>
						<xsd:enumeration value="to"/>
						<xsd:enumeration value="self_begins"/>
						<xsd:enumeration value="self_ends"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasDiagramChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (Project) have diagram or not. Or does the active source (Model Element) have diagram(s) or not by its property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the project have diagram.
					@flag=false
						means the nodes will be executed if the project have no diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Check on which model element property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasSubDiagramChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement) have sub diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the model element have sub diagram.
					@flag=false
						means the nodes will be executed if the model element have no sub diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasOwnerDiagramsChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement) have owner diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the model element have owner diagram.
					@flag=false
						means the nodes will be executed if the model element have no owner diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="resetHeading" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@resetHeading=true
						means: The used heading(s) within this block won't affect the content which out of this block.
					@resetHeading=false
						means: The used heading(s) within this block will affect the content which out of this block. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Runtime Variable, get/set variable while generating document content
	(
		SetVar, Var
	)
	-->
	<xsd:element name="SetVar">
		<xsd:annotation>
			<xsd:documentation>Define a variable, get value from current element's property and stored the value into this variable.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="name" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Define the variable name. (e.g. "my var 001")</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Get value from current element's property, and the value will be assigned into this variable.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="Var">
		<xsd:annotation>
			<xsd:documentation>Generate value from a variable.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="name" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Variable name, get value from which variable.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isHTML" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated. Replaced by @forcePlainText.
					
					Determine does the property value is HTML text.
					Now, it will be 'true' for documentation property. So, @isHTML is useless.
					If want to show plain text of documentation property, may set @forcePlainText=true.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Size' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontFamily" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Family' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="forcePlainText" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Generate plain text if the value is in HTML?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Generate the 'default value' if @property is not found.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="dateFormatString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						Date value property will be formatted with the format pattern specified before displaying. Formatting will only occur when the property is a date value (e.g. pmLastModified).
						e.g. @dateFormatString ="yyyy-MM-dd"
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isItalic.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isUnderline.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>same as Text.fontFamily.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>same as Text.fontSize.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.foreColor.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as Text.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional" default="unspecified">
				<xsd:annotation>
					<xsd:documentation>same as Text.direction.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="unspecified"/>
						<xsd:enumeration value="ltr"/>
						<xsd:enumeration value="rtl"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.numberingLevel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="href" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.href.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hyperlink" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as Text.hyperlink.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNext" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as Text.keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInWord" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInPreview" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-top" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-top</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-right" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-right</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-bottom" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-bottom</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-left" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-left</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Property, getting property value from model element
	(
		Property, 
		ModelElementProperty(ConditionChecker), 
		FromElement(ConditionChecker), ToElement(ConditionChecker), 
		FromEnd(ConditionChecker), ToEnd(ConditionChecker), RelationshipEndEndRelationship(ConditionChecker), RelationshipEndOppositeEnd(ConditionChecker), 
		DiagramProperty(ConditionChecker), DiagramElementProperty(ConditionChecker), 
		ParentModel(ConditionChecker), ParentShape(ConditionChecker), OwnerDiagram(ConditionChecker)
	)
	-->
	<xsd:element name="Property">
		<xsd:annotation>
			<xsd:documentation>Generate String value from property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="anchorMark" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Mark the generated text to be an Anchor Mark of current 'source'.
						
						If the name of this 'source' is generated into same document. 
						The generated name will be a hyperlink, that will link to this Anchor Mark.
						
						'source' can be a Model Element, or a Diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isHTML" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated. Replaced by @forcePlainText.
					
					Determine does the property value is HTML text.
					Now, it will be 'true' for documentation property. So, @isHTML is useless.
					If want to show plain text of documentation property, may set @forcePlainText=true.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Size' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontFamily" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Family' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="forcePlainText" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Generate plain text if the value is in HTML?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Generate the 'default value' if @property is not found.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="dateFormatString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						Date value property will be formatted with the format pattern specified before displaying. Formatting will only occur when the property is a date value (e.g. pmLastModified).
						e.g. @dateFormatString ="yyyy-MM-dd"
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isItalic.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.isUnderline.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>same as Text.fontFamily.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>same as Text.fontSize.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.foreColor.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as Text.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional" default="unspecified">
				<xsd:annotation>
					<xsd:documentation>same as Text.direction.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="unspecified"/>
						<xsd:enumeration value="ltr"/>
						<xsd:enumeration value="rtl"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.numberingLevel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="href" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.href.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hyperlink" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as Text.hyperlink.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNext" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as Text.keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInWord" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInPreview" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-top" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-top</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-right" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-right</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-bottom" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-bottom</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="margin-left" type="xsd:integer" use="optional" default="0">
				<xsd:annotation>
					<xsd:documentation>same as Text.margin-left</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ModelElementPropertyType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="property" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Get value from which property.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ModelElementProperty">
		<xsd:annotation>
			<xsd:documentation>Change active source to ModelElement from ModelElement property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ModelElementPropertyType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ModelElementPropertyConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the model from this property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ModelElementPropertyType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="FromElementType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="FromElement">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'From Element' of current relationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:FromElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FromElementConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the From Element of current relationship.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:FromElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ToElementType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="ToElement">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'To Element' of current relationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ToElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ToElementConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the To Element of current relationship.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ToElementType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="FromEndType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="FromEnd">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'From' RelationshipEnd from EndRelationship. 
			Or change active source to 'From' Model from SimpleRelationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:FromEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FromEndConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the From End.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:FromEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ToEndType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="ToEnd">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'To' RelationshipEnd from EndRelationship. 
			Or change active source to 'To' Model from SimpleRelationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ToEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ToEndConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the ToEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ToEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="RelationshipEndEndRelationshipType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="RelationshipEndEndRelationship">
		<xsd:annotation>
			<xsd:documentation>Change active source to EndRelationship from RelationshipEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:RelationshipEndEndRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RelationshipEndEndRelationshipConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the Relationship of this RelationshipEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:RelationshipEndEndRelationshipType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="RelationshipEndOppositeEndType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="RelationshipEndOppositeEnd">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Opposite' RelationshipEnd from RelationshipEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:RelationshipEndOppositeEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RelationshipEndOppositeEndConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the 'Opposite' RelationshipEnd/ModelElement of this RelationshipEnd</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:RelationshipEndOppositeEndType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="DiagramPropertyType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="property" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Get value from which property.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="DiagramProperty">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to Diagram from property.
			
			e.g. 
			BPSubProcess.diagramId refer to its BPD (Business Process Diagram). 
			If active source is a BPSubProcess, using @property=diagramId can change active source to its BPD.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:DiagramPropertyType">
					<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
						<xsd:annotation>
							<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramPropertyConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker for the diagram from this property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:DiagramPropertyType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="DiagramElementPropertyType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="property" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Get value from which property.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="DiagramElementProperty">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to DiagramElement from property.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:DiagramElementPropertyType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramElementPropertyConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the diagram element from this property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:DiagramElementPropertyType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ParentModelType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="modelType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ParentModel">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Parent' model element from ModelElement or Diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ParentModelType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ParentModelConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check parent model element.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ParentModelType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="ParentShapeType">	
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
		<xsd:attribute name="shapeType" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="ParentShape">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Parent' shape from DiagramElement or ModelElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ParentShapeType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ParentShapeConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check parent shape.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:ParentShapeType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="OwnerDiagramType">
		<xsd:choice maxOccurs="unbounded">
			<xsd:element ref="rw:Conditions" minOccurs="0" maxOccurs="1"/>
			<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="OwnerDiagram">
		<xsd:annotation>
			<xsd:documentation>Change active source to parent diagram from DiagramElement or ModelElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:OwnerDiagramType">
					<xsd:attribute name="layerFilters" type="rw:layerFilters" use="optional">
						<xsd:annotation>
							<xsd:documentation>This diagram's Image/IterationBlock will be filtered by its layers.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="OwnerDiagramConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Condition Checker to check the owner diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="rw:OwnerDiagramType">
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	
	<!--
	Others
	(
		Image, Icon, SpecifiedIcon, 
		UseCaseNotes, UseCaseNote, UseCaseNotePointIterationBlock, HasUseCaseNotePoint, UseCaseNotePointIndent, 
		UserStoryConversation, UserStoryConversationPointIterationBlock, HasUserStoryConversationPoint, UserStoryConversationPointIndent, 
		FlowOfEvents, FlowOfEvent, FlowOfEventIterationBlock, HasFlowOfEvent, FlowOfEventIndent, TestingProcedureContainerIterationBlock, 
		BPProcedures, BPProcedureStepIterationBlock, HasBPProcedureStep, BPProcedureStepIndent, 
		TestPlans, TestPlanStepIterationBlock, TestPlanStepIndent, 
		OutlineView, 
		SubLevelInflows, SubLevelOutflows, 
		MatrixDiagram, ChartDiagram, GridDiagram, ETLTable, DataTable, 
		RevDiff
	)
	-->
	<xsd:element name="Image">
		<xsd:annotation>
			<xsd:documentation>Showing image of Diagram/DiagramElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as Text.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="width" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify 'Width' of the generated image.
					'type' must be rw:measureUnit or string represents in percentage (e.g. width="15500" or width="100%")
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="height" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify 'Height' of the generated image.
					'type' must be rw:measureUnit or string represents in percentage (e.g. height="15500" or height="100%")
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="maxWidth" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Max Width' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="maxHeight" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Max Height' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="landscape" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @rotate</xsd:documentation>
					<xsd:documentation>'Rotate' the generated image in 90 degree?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rotate" use="optional" default="none">
				<xsd:annotation>
					<xsd:documentation>Rotate the image to right (90 degree) or left (270 degree) </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="none"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="left"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="showLegend" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Legend will be shown in image?</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
						<xsd:enumeration value="FollowDiagram"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="keepWithPreviousInPDF" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Make sure the previous item will be shown in same page with this item. (Used for PDF document only)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNext" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as Text.keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInWord" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="keepWithNextInPreview" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by keepWithNext.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="Icon">
		<xsd:annotation>
			<xsd:documentation>Showing icon for model type.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as Text.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="landscape" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @rotate</xsd:documentation>
					<xsd:documentation>'Rotate' the generated image in 90 degree?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rotate" use="optional" default="none">
				<xsd:annotation>
					<xsd:documentation>Rotate the image to right (90 degree) or left (270 degree) </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="none"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="left"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SpecifiedIcon">
		<xsd:annotation>
			<xsd:documentation>Showing specified icon.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="kind" use="required">
				<xsd:annotation>
					<xsd:documentation>Shows a Tick or Reference-Arrow icon</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="tick"/>
						<xsd:enumeration value="referenceArrow"/>
						<xsd:enumeration value="new"/>
						<xsd:enumeration value="update"/>
						<xsd:enumeration value="delete"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as Text.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="landscape" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @rotate</xsd:documentation>
					<xsd:documentation>'Rotate' the generated image in 90 degree?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rotate" use="optional" default="none">
				<xsd:annotation>
					<xsd:documentation>Rotate the image to right (90 degree) or left (270 degree) </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="none"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="left"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UseCaseNotes">
		<xsd:annotation>
			<xsd:documentation>Showing Use Case Notes for a Use Case. Based on a UseCase to generate its UseCaseNotes.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of Use Case Note?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter Use Case Note by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UseCaseNote">
		<xsd:annotation>
			<xsd:documentation>Showing Use Case Note. Based on a UseCaseNote to generate it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of Use Case Note?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UseCaseNotePointIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve UseCasePointNote from UseCaseNote. Based on UseCase's UseCaseNote.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasUseCaseNotePoint">
		<xsd:annotation>
			<xsd:documentation>
			Check UseCaseNote has any UseCaseNotePoint. Based on UseCase's UseCaseNote. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the ModelElement.
					@flag=false
						means the nodes will be executed if property does not refer to the ModelElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UseCaseNotePointIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of UseCaseNote's UseCaseNotePoint.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab). </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UserStoryConversation">
		<xsd:annotation>
			<xsd:documentation>Showing User Story Conversation. Based on a User Story to generate it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UserStoryConversationPointIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve UserStoryConversationNote from UserStoryConversation. Based on UserStory.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasUserStoryConversationPoint">
		<xsd:annotation>
			<xsd:documentation>
			Check UserStoryConversation has any UserStoryConversationPoint. Based on UserStory. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the ModelElement.
					@flag=false
						means the nodes will be executed if property does not refer to the ModelElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="UserStoryConversationPointIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of UserStoryConversation's UserStoryConversationPoint.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab). </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEvents">
		<xsd:annotation>
			<xsd:documentation>Showing Flow Of Events for a Use Case. Based on a UseCase to generate its StepContainers.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					If not defined, and this Scenario shows Procedure and ExpectedResults, the default tableStyle will be "Scenario" (that showing dotted-lines in table)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showProcedure" use="optional" default="follow model">
				<xsd:annotation>
					<xsd:documentation>Generate the Procedures and ExpectedResults columns of the FlowOfEvent?</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="follow model"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.colWidths.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of Flow of event?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter Flow of events by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEvent">
		<xsd:annotation>
			<xsd:documentation>Showing Flow Of Event. Based on a StepContainer to generate it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					If not defined, and this Scenario shows Procedure and ExpectedResults, the default tableStyle will be "Scenario" (that showing dotted-lines in table)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showProcedure" use="optional" default="follow model">
				<xsd:annotation>
					<xsd:documentation>Generate the Procedures and ExpectedResults columns of the FlowOfEvent?</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="follow model"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.colWidths.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of Flow of event?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEventIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve step/extension from Flow of Event (StepContainer). Based on UseCase's StepContainer.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="includeSteps" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Retrieve steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeExtensions" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
						Retrieve extensions?
						false - not include
						true - include, and the extensions will be shown after all steps.
						embedded - include, amd the extensions will be shown after its owner step.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="false"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="embedded"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasFlowOfEvent">
		<xsd:annotation>
			<xsd:documentation>
			Check Flow of Event (StepContainer) has any step/extension. Based on UseCase's StepContainer.
			
			e.g.
			To check FlowOfEvent
			 
			- have step only (no extension)
			@hasStep="true" @hasExtension="false"
			
			- have extension only (no step) (In fact. It is impossible, because extension belongs to step. No step, won't have extension)
			@hasStep="false" @hasExtension="true"
			 
			- have step or extension
			@hasStepOrExtension="true" 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="hasStep" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hasExtension" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has extension?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hasStepOrExtension" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps or extensions?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEventIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of Flow of Event's step/extension.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab). </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestingProcedureContainerIterationBlock">
		<xsd:annotation>
			<xsd:documentation>
			Retrieve Testing Procedure. Works with FlowOfEventIterationBlock to get different Procedure/Expected Result.
			Based on UseCase's StepContainer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedures">
		<xsd:annotation>
			<xsd:documentation>Showing BPProcedures for a BPD's Task, SubProcess, etc...</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Shows borders between Rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Shows borders between Columns.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of procedure?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter BPProcedures by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedureStepIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve steps from BPProcedure.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasBPProcedureStep">
		<xsd:annotation>
			<xsd:documentation>Check BPProcedure has any step/extension. Based on UseCase's StepContainer.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="hasStep" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedureStepIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of BPProcedure's step.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlans">
		<xsd:annotation>
			<xsd:documentation>Showing Test Plans for a Requirement Diagram's Test Case</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlanStepIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve steps from Test Plan.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="ignoreLastSeparator" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreLastSeparator.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlanStepIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of Test Plan's step.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="OutlineView">
		<xsd:annotation>
			<xsd:documentation>Showing Breakdown Structure in Outline View</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="SubLevelInflows">
		<xsd:annotation>
			<xsd:documentation>Insert sub-level inflows of 'start element'</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="SubLevelOutflows">
		<xsd:annotation>
			<xsd:documentation>Insert sub-level outflows of 'end element'</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="MatrixDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Matrix Diagram as table(s).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="DisplayOption" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Deprecated. (Only support in Report Writer. Not support in Doc. Composer) 
							
							How to display the model?
							For example:
								- showing Requirement "ID" for Requirement
								 modelType="Requirement" value="${requirementID}"
								 
								- showing Use Case "ID : Name" for Use Case
								 modelType="UseCase" value="${useCaseID} : ${name}"
								 
								- showing "Name (ModelType)" for others
								 value="${name} (${modelType})"
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="modelType" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>
									This display option showing for which model types. 
									If not specified, this display option will be a Default display option for all model types.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="value" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>
									How to display the model.
									Use ${PropertyName} to show the model's property value (e.g. name, id, etc...).
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Matrix diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ChartDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Chart Diagram as table(s).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="DisplayOption" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Deprecated. (Only support in Report Writer. Not support in Doc. Composer)
							
							How to display the model?
							For example:
								- showing Requirement "ID" for Requirement
								 modelType="Requirement" value="${requirementID}"
								 
								- showing Use Case "ID : Name" for Use Case
								 modelType="UseCase" value="${useCaseID} : ${name}"
								 
								- showing "Name (ModelType)" for others
								 value="${name} (${modelType})"
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="modelType" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>
									This display option showing for which model types. 
									If not specified, this display option will be a Default display option for all model types.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="value" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>
									How to display the model.
									Use ${PropertyName} to show the model's property value (e.g. name, id, etc...).
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Chart diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GridDiagram">
		<xsd:annotation>
			<xsd:documentation>Show Grid Diagram as a table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="anchorMarkOnElements" type="xsd:string" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Mark the generated text(s) to be an Anchor Mark of the model element of all rows.
						
						If the name of these model elements are generated into same document. 
						The generated name will be a hyperlink, that will link to this Anchor Mark.
						
						Expected values: "true" or "false"
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Column(s)' width of the table.
					@colWidths is relative to @tableWidth. 
					For example,  tableWidth="15000" colWidths="10, 20, 70", finally the columns widths will be: 
					1500 (15000*10/(10+20+70))
					3000 (15000*20/(10+20+70))
					10500  (15000*70/(10+20+70))
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s). Also affect header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerRowBackgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="columnHeaders" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Column(s)' header of the table.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="headerStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="contentStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Size' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontFamily" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Family' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ETLTable">
		<xsd:annotation>
			<xsd:documentation>Show ETL Table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="anchorMarkOnElements" type="xsd:string" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Mark the generated text(s) to be an Anchor Mark of the model element of all rows.
						
						If the name of these model elements are generated into same document. 
						The generated name will be a hyperlink, that will link to this Anchor Mark.
						
						Expected values: "true" or "false"
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Column(s)' width of the table.
					@colWidths is relative to @tableWidth. 
					For example,  tableWidth="15000" colWidths="10, 20, 70", finally the columns widths will be: 
					1500 (15000*10/(10+20+70))
					3000 (15000*20/(10+20+70))
					10500  (15000*70/(10+20+70))
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s). Also affect header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerRowBackgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="columnHeaders" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Column(s)' header of the table.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="headerStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="contentStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Size' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontFamily" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Family' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DataTable">
		<xsd:annotation>
			<xsd:documentation>Show DataTable as a table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style to replace the Data Table's table style setting.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RuleFamilyTable">
		<xsd:annotation>
			<xsd:documentation>Insert Rule Family Table.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DecisionTableDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Decision Table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Decision table diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="EntityRecords">
		<xsd:annotation>
			<xsd:documentation>Insert Data Table of the Entity.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Specify the Table Style by its id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
					Width of table.
					'type' must be rw:measureUnit or string represents in percentage (e.g. tableWidth="15500" or tableWidth="100%")
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerRowBackgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in header row?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="headerStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in header row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentIsUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text in content rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentFontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentForeColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="contentAlignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="contentStyle" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph in content rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="RevDiff">
		<xsd:annotation>
			<xsd:documentation>Generate the Revision Differences between From-Rev and current revision.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="scope" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
						A unique variable name, that variable will store the Scope of this Revision Differences.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:simpleType name="layerFilters">
		<xsd:annotation>
			<xsd:documentation>
			The diagram's content (Image/Shapes) will be filtered by this diagram's layers.
			Specify the layer name(s) to setup the layer filter(s).
			
			Possible Values:
				@all - All content of this diagram will be included in the document. (Even though some layers may be invisible in diagram)
				@followDiagram - Follow the visibility of the layers set to the actual diagram. Layers that are set visible will be included here, likewise hidden layers will be excluded. Simply put, what you can see in the document will be exactly the same as the real diagram.
				name - Include the specified layer only.
				@exclude:name - Exclude the specified layer.
				name1, name2, name3, ... - Include the specified layers only. ", " is used as a delimiter.
				@exclude:name1, name2, name3, ... - Exclude the specified layers. ", " is used as a delimiter.
				${...} - Use a variable to specify the name/names of the layers to be included. User has to specify the value of the variable in Doc. Composer.
				@exclude:${...} - Use a variable to specify the name/names of the layers to be excluded. User has to specify the value of the variable in Doc. Composer.
				
			* By not specifying layerFilters, 'AdHoc' filter will be used, which means that the end user will be responsible for configuring the filter in Doc. Composer. If not specified, it will behave as @followDiagram.
			 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="measureUnit">
		<xsd:annotation>
			<xsd:documentation>
			Measure unit of width/height (e.g. Table's width). 
			It is in 0.01mm. (e.g. 21000 = 210mm = width of A4 paper.)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:int">
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="strings">
		<xsd:annotation>
			<xsd:documentation>Strings separated by ", ". e.g. "Class, UseCase, Actor" means "Class", "UseCase", "Actor"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="integers">
		<xsd:annotation>
			<xsd:documentation>Integers separated by ", ". e.g. "10, 20, 70"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="booleans">
		<xsd:annotation>
			<xsd:documentation>Booleans separated by ", ". e.g. "true, false, false"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="color">
		<xsd:annotation>
			<xsd:documentation>
			Color can be represented in following 2 forms:
			1. "R, G, B" in decimal, e.g. "230, 230, 230" (it is a light gray color)
			2. #FFFFFF (RGB in hexadecimal), e.g. #FF0000 (it is a red color)
			
			Prefer using #FFFFFF. Because "R, G, B" is not suitable for colors.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="colors">
		<xsd:annotation>
			<xsd:documentation>
			Colors separated by ", ". e.g. "#FF0000, #00FF00, #0000FF".
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:element name="Block">
		<xsd:annotation>
			<xsd:documentation>
				The used heading(s) within this block won't affect the content which out of this block. 
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Inline">
		<xsd:annotation>
			<xsd:documentation>
				In 'Template', inline another template.
				The used heading(s) within this block will affect the content which out of this block.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="template" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Name of another template</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Reference">
		<xsd:annotation>
			<xsd:documentation>
			In 'Template' or 'LoopTemplate', include another template.
			The used heading(s) within this block won't affect the content which out of this block.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="template" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Name of another template</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="LoopTemplate">
		<xsd:annotation>
			<xsd:documentation>The root element of combined template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:LoopTemplateContent"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Loop">
		<xsd:annotation>
			<xsd:documentation>The root element of combined template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="type" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						A specified 'type' of looping.
						Now, we only support "BusinessProcessFlowLoop"
						
						"BusinessProcessFlowLoop" will sort the BPD elements based on their flow order.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="BusinessProcessFlowLoop"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Loop the children by modelTypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Loop the children by modelType. If @modelTypes is also specified. This modelType will be included in modelTypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:group name="AnyElements">
		<xsd:choice>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Template"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TemplateInformationHeader"/>
			-->
			<xsd:element maxOccurs="unbounded" ref="rw:SetVar"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Var"/>
			<xsd:element maxOccurs="unbounded" ref="rw:AnyBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ProjectBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParagraphStyle"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParagraphBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:PageBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Text"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStylePage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleHtmlText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleImage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableOfContents"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableRow"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableCell"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlockConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEach"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPost"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPostConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ConditionsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DefaultValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasChildElementChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentModelChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentShapeChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasRelationshipChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasSubDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasOwnerDiagramsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Property"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ModelElementProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ModelElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModel"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModelConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShape"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShapeConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Image"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Icon"/>
			<xsd:element maxOccurs="unbounded" ref="rw:SpecifiedIcon"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotes"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNote"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotePointIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasUseCaseNotePoint"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotePointIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversation"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversationPointIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasUserStoryConversationPoint"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversationPointIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEvents"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEvent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasFlowOfEvent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestingProcedureContainerIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedures"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasBPProcedureStep"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlans"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OutlineView"/>
			<xsd:element maxOccurs="unbounded" ref="rw:SubLevelInflows"/>
			<xsd:element maxOccurs="unbounded" ref="rw:SubLevelOutflows"/>
			<xsd:element maxOccurs="unbounded" ref="rw:MatrixDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ChartDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:GridDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ETLTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DataTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RuleFamilyTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DecisionTableDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:EntityRecords"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RevDiff"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Block"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Inline"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Reference"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Subtemplate"/>
			<xsd:element maxOccurs="unbounded" ref="rw:CombinedTemplate"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:Loop"/>
		</xsd:choice>
	</xsd:group>
	
	<xsd:group name="ControlElements">
		<xsd:choice>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Template"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TemplateInformationHeader"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:AnyBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ProjectBaseInitiationBlock"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:ParagraphBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:PageBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Text"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStylePage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleHtmlText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleImage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableOfContents"/>
			
			<xsd:element maxOccurs="unbounded" ref="rw:TableBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableRow"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableCell"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlockConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEach"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPost"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPostConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ConditionsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DefaultValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasChildElementChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentModelChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentShapeChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasRelationshipChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasSubDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasOwnerDiagramsChecker"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Property"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:ModelElementProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ModelElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModel"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModelConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShape"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShapeConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagramConditionChecker"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Image"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Icon"/>
			<xsd:element maxOccurs="unbounded" ref="rw:SpecifiedIcon"/>
			 -->
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotes"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNote"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotePointIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversation"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversationPointIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEvents"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEvent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedures"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlans"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OutlineView"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:UseCaseNotePointIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasUseCaseNotePoint"/>
			<xsd:element maxOccurs="unbounded" ref="rw:UserStoryConversationPointIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasUserStoryConversationPoint"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasFlowOfEvent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestingProcedureContainerIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasBPProcedureStep"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIterationBlock"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:SubLevelInflows"/>
			<xsd:element maxOccurs="unbounded" ref="rw:SubLevelOutflows"/>
			<xsd:element maxOccurs="unbounded" ref="rw:MatrixDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ChartDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:GridDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ETLTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DataTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RuleFamilyTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DecisionTableDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:EntityRecords"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RevDiff"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:Block"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Inline"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Reference"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Subtemplate"/>
			<xsd:element maxOccurs="unbounded" ref="rw:CombinedTemplate"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:Loop"/>
		</xsd:choice>
	</xsd:group>
	
	<xsd:group name="ConditionChecker">
		<xsd:choice>
			<xsd:element maxOccurs="unbounded" ref="rw:ConditionsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DefaultValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasChildElementChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasRelationshipChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasSubDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasOwnerDiagramsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentModelChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentShapeChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlockConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPostConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ModelElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementPropertyConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModelConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShapeConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagramConditionChecker"/>
		</xsd:choice>
	</xsd:group>
	
	<xsd:group name="LoopTemplateContent">
		<xsd:choice>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Reference"/> // cannot contain Reference directly
			<xsd:element maxOccurs="unbounded" ref="rw:Loop"/>
			 -->
			
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlockConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEach"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationshipConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEndConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagramElementConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPost"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachPostManiaPostConditionChecker"/>
			
			<xsd:element maxOccurs="unbounded" ref="rw:ConditionsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DefaultValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasValueChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasChildElementChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasRelationshipChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasSubDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasOwnerDiagramsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentModelChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentShapeChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramChecker"/>
		</xsd:choice>
	</xsd:group>
	
</xsd:schema>
