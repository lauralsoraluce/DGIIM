int MPI_Send( void *buf_emi, int num, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm );
// ASÍNCRONO SEGURO: el receptor no necesariamente ha iniciado ya la recepción del mensaje

int MPI_Recv( void *buf_rec, int num, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status )
// SÍNCRONO SEGURO

int MPI_Get_count( MPI_Status *status, MPI_Datatype dtype, int *num );
// Escribe en el entero apuntado por num el número de items recibidos en una llamada MPI_Recv previa. El receptor debe conocer y proporcionar el tipo de los datos (dtype).

//EJEMPLO:
	if ( id_propio == id_emisor ) // soy emisor: enviar
	{
		int valor_enviado = 100 ; // buffer del emisor (tiene 1 entero: MPI_INT)
		MPI_Send( &valor_enviado, 1, MPI_INT, id_receptor, 0, MPI_COMM_WORLD );
		cout << "Emisor ha enviado: " << valor_enviado << endl ;
	}
	else // soy receptor: recibir
	{
		int valor_recibido; // buffer del receptor (tiene 1 entero: MPI_INT)
		MPI_Status estado; // estado de la recepción
		MPI_Recv( &valor_recibido,1,MPI_INT,id_emisor,0,MPI_COMM_WORLD,&estado);
		cout << "Receptor ha recibido: " << valor_recibido << endl ;
	}



int MPI_Ssend( void* buf_emi, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm );
// SÍNCRONO SEGURO: ya se ha iniciado en el receptor una operación de recepción que encaja con este envío

//EJEMPLO:
	if ( id_propio % 2 == 0 ) // si proceso par: enviar y recibir
	{
		id_vecino = id_propio+1 ; // el vecino es el siguiente
		MPI_Ssend( &valor_env,1,MPI_INT,id_vecino,0,MPI_COMM_WORLD );
		MPI_Recv ( &valor_rec,1,MPI_INT,id_vecino,0,MPI_COMM_WORLD,&estado );
	}
	else // si proceso impar: recibir y enviar
	{
		id_vecino = id_propio-1 ; // el vecino es el anterior
		MPI_Recv ( &valor_rec,1,MPI_INT,id_vecino,0,MPI_COMM_WORLD,&estado );
		MPI_Ssend( &valor_env,1,MPI_INT,id_vecino,0,MPI_COMM_WORLD );
	}



int MPI_Probe( int source, int tag, MPI_Comm comm, MPI_Status *status );
// El proceso que llama queda bloqueado hasta que haya al menos un mensaje enviado a dicho proceso (en el comunicador comm) que encaje con los argumentos.

//EJEMPLO:
	MPI_Probe( MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &estado );
	MPI_Get_count( &estado, MPI_CHAR, &num_chars_rec );
	// reservar memoria para el mensaje y recibirlo
	char * buffer = new char[num_chars_rec+1] ;
	MPI_Recv( buffer, num_chars_rec, MPI_CHAR, estado.MPI_SOURCE, MPI_ANY_TAG,
	MPI_COMM_WORLD, &estado );
	buffer[num_chars_rec] = 0 ; // añadir un cero al final
	


int MPI_Iprobe( int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status );
// Al terminar, el entero apuntado por flag será mayor que 0 solo si hay algún mensaje enviado al proceso que llama, y que encaje con los argumentos (en el comunicador comm). Si no hay mensajes, dicho entero es 0.

//EJEMPLO:
	for( unsigned id_emisor = id_min ; id_emisor <= id_max ; id_emisor++ )
	{
		MPI_Iprobe( id_emisor, MPI_ANY_TAG, MPI_COMM_WORLD, &hay_mens, &estado);
		if ( hay_mens ) break ; // si hay mensaje: terminar consulta
	}
	if ( ! hay_mens ) // si no hay mensaje:
		id_emisor = MPI_ANY_SOURCE ; // aceptar de cualquiera
	// recibir el mensaje del emisor concreto o de cualquiera
	MPI_Recv( &valor, 1,MPI_INT, id_emisor, 0, MPI_COMM_WORLD, &estado );
	
	
	
int MPI_Isend( void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request );
// inicia envío pero retorna antes de leer el buffer

int MPI_Irecv( void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request );
// inicia recepción pero retorna antes de recibir

//request es un ticket que permitirá después identificar la operación cuyo estado se pretende consultar o se espera que finalice

int MPI_Test( MPI_Request *request, int *flag, MPI_Status *status );
// La función MPI_Test comprueba la operación identificada por un ticket (request) y escribe en flag un número > 0 si ha acabado, o bien 0 si no ha acabado

int MPI_Wait( MPI_Request *request, MPI_Status *status );
// MPI_Wait sirve para esperar bloqueado hasta que termine una operación

// Las operaciones inseguras:
	// Permiten simultanear trabajo útil en el emisor y/o receptor con la lectura, transmisión y recepción del mensaje
	// Aumentan el paralelismo potencial y por tanto pueden mejorar la eficiencia en tiempo

//EJEMPLO:
	int valor_enviado = id_propio*(id_propio+1), // dato a enviar
	valor_recibido, id_vecino ;
	MPI_Status estado ;
	MPI_Request ticket_envio, ticket_recepcion;
	if ( id_propio % 2 == 0 ) id_vecino = id_propio+1 ;
	else id_vecino = id_propio-1 ;
	// iniciar ambas operaciones simultáneamente (el orden es irrelevante)
	MPI_Irecv( &valor_recibido, 1, MPI_INT, id_vecino, 0, MPI_COMM_WORLD, &ticket_recepcion );
	MPI_Isend( &valor_enviado, 1, MPI_INT, id_vecino, 0, MPI_COMM_WORLD, &ticket_envio );
	// esperar hasta que acaben ambas operaciones
	MPI_Wait( &ticket_envio, &estado );
	MPI_Wait( &ticket_recepcion, &estado );



	
