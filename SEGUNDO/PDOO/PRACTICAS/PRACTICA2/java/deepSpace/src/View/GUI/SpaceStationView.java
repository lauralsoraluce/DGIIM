/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.GUI;

import controller.Controller;
import deepspace.GameState;
import deepspace.ShieldToUI;
import deepspace.SpaceStationToUI;
import deepspace.WeaponToUI;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author lauralazaro
 */
public class SpaceStationView extends JPanel {
    
    DamageView damage;
    HangarView hangar;

    /**
     * Creates new form SpaceStationView
     */
    public SpaceStationView() {
        initComponents();
        
        repaint();
        revalidate();
    }
    
    public void setSpaceStation (SpaceStationToUI space) {
        SpaceStationLabel.setText(space.getName());
        SpaceStationLabel.setBackground(Color.gray);
        SpaceStationLabel.setOpaque(true);
        
        firePower.setText(Float.toString(space.getAmmoPower()));
        shieldPower.setText(Float.toString(space.getShieldPower()));
        fuelUnits.setText(Float.toString(space.getFuelUnits()));
        medals.setText(Integer.toString(space.getnMedals()));
        
        ArrayList<WeaponToUI> weapons = space.getWeapons();
        ArrayList<ShieldToUI> shields = space.getShieldBoosters();
        
        weaponsPanel.removeAll();
        damagePanel.removeAll();
        hangarPanel.removeAll();
        shieldsPanel.removeAll();
        
        WeaponView weaponView;
        
        for (WeaponToUI weapon : weapons) {
            weaponView = new WeaponView();
            weaponView.setWeapon(weapon);
            weaponsPanel.add(weaponView);
        }
        
        ShieldView shieldView;
        
        for (ShieldToUI shield : shields) {
            shieldView = new ShieldView();
            shieldView.setShield(shield);
            shieldsPanel.add(shieldView);
        }
        
        damage = new DamageView();
        hangar = new HangarView();
        
        damage.setDamage(space.getPendingDamage());
        hangar.setHangar(space.getHangar());
        
        damagePanel.add(damage);
        hangarPanel.add(hangar);
        
        boolean shieldsInHangar = false;
        boolean weaponsInHangar = false;
        boolean elementsInHangar = false;
        
        if (space.getHangar()!=null){
            weaponsInHangar=(space.getHangar().getWeapons().size()!=0);
            shieldsInHangar=(space.getHangar().getShieldBoosters().size()!=0);
            elementsInHangar=weaponsInHangar||shieldsInHangar;
        }
        boolean weaponsMounted = space.getWeapons().size() != 0;
        boolean shieldsMounted = space.getShieldBoosters().size() != 0;
        
        GameState gameState=Controller.getInstance().getState();
        boolean init = (gameState==GameState.INIT);
        boolean aftercombat = (gameState==GameState.AFTERCOMBAT);
        
        discardHangarButton.setEnabled((init||aftercombat)&&(space.getHangar()!=null));
        mountButton.setEnabled((init||aftercombat)&&(space.getHangar()!=null)&&elementsInHangar);
        discardButton.setEnabled((init||aftercombat)&&(elementsInHangar||weaponsMounted||shieldsMounted));
        
        repaint();
        revalidate();
        
    }
    
    ArrayList<Integer> MountWeapons(){
        ArrayList<Integer> selectedWeaponsMounted = new ArrayList<>();
        
        int i = 0;
        for (Component c : weaponsPanel.getComponents()) {
            if (((CombatElementView) c).getSelected()) {
                selectedWeaponsMounted.add(i);
            }
            i++;
        }
        
        return selectedWeaponsMounted;
    }
    
    
    ArrayList<Integer> MountShields(){
        ArrayList<Integer> selectedShieldsMounted = new ArrayList<>();
        
        int i = 0;
        for (Component c : shieldsPanel.getComponents()) {
            if (((CombatElementView) c).getSelected()) {
                selectedShieldsMounted.add(i);
            }
            i++;
        }
        
        return selectedShieldsMounted;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SpaceStationLabel = new javax.swing.JLabel();
        firePowerLabel = new javax.swing.JLabel();
        firePower = new javax.swing.JLabel();
        shieldPowerLabel = new javax.swing.JLabel();
        shieldPower = new javax.swing.JLabel();
        fuelUnitsLabel = new javax.swing.JLabel();
        fuelUnits = new javax.swing.JLabel();
        medalsLabel = new javax.swing.JLabel();
        medals = new javax.swing.JLabel();
        damagePanel = new javax.swing.JPanel();
        hangarPanel = new javax.swing.JPanel();
        mountButton = new javax.swing.JButton();
        discardButton = new javax.swing.JButton();
        discardHangarButton = new javax.swing.JButton();
        scrollWeapons = new javax.swing.JScrollPane();
        weaponsPanel = new javax.swing.JPanel();
        scrollShields = new javax.swing.JScrollPane();
        shieldsPanel = new javax.swing.JPanel();

        SpaceStationLabel.setText("jLabel1");

        firePowerLabel.setText("Potencia de ataque:");

        firePower.setText("jLabel1");

        shieldPowerLabel.setText("Potencia de Defensa:");

        shieldPower.setText("jLabel1");

        fuelUnitsLabel.setText("Nivel de Combustible:");

        fuelUnits.setText("jLabel1");

        medalsLabel.setText("Medallas:");

        medals.setText("jLabel1");

        hangarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        hangarPanel.setForeground(new java.awt.Color(93, 93, 93));

        mountButton.setText("Equipar");
        mountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mountButtonActionPerformed(evt);
            }
        });

        discardButton.setText("Descartar");
        discardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardButtonActionPerformed(evt);
            }
        });

        discardHangarButton.setText("Descartar Hangar Completo");
        discardHangarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardHangarButtonActionPerformed(evt);
            }
        });

        weaponsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Potenciadores  de Fuego"));
        scrollWeapons.setViewportView(weaponsPanel);

        shieldsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Potenciadores de Defensa"));
        scrollShields.setViewportView(shieldsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SpaceStationLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(firePowerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firePower))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shieldPowerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shieldPower))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fuelUnitsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fuelUnits))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(medalsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(medals)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(damagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mountButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(discardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(discardHangarButton)
                        .addGap(572, 572, 572))
                    .addComponent(scrollShields)
                    .addComponent(scrollWeapons)
                    .addComponent(hangarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SpaceStationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firePowerLabel)
                            .addComponent(firePower))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shieldPowerLabel)
                            .addComponent(shieldPower))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fuelUnitsLabel)
                            .addComponent(fuelUnits))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medalsLabel)
                            .addComponent(medals)))
                    .addComponent(damagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollWeapons, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollShields, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hangarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mountButton)
                    .addComponent(discardButton)
                    .addComponent(discardHangarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mountButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> weaponsSelected = new ArrayList<>();
        ArrayList<Integer> shieldsSelected = new ArrayList<>();
        
        hangar.getSelectedInHangar(weaponsSelected, shieldsSelected);
        Controller.getInstance().mount(weaponsSelected, shieldsSelected);
        
        MainView.getInstance().updateView();
    }//GEN-LAST:event_mountButtonActionPerformed

    private void discardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> weaponsMountedSelected = MountWeapons();
        ArrayList<Integer> shieldsMountedSelected = MountShields();
        
        ArrayList<Integer> weaponsSelectedInHangar = new ArrayList<>();
        ArrayList<Integer> shieldsSelectedInHangar = new ArrayList<>();
        
        Controller.getInstance().discard(Controller.WEAPON, weaponsMountedSelected, shieldsMountedSelected);
        Controller.getInstance().discard(Controller.SHIELD, weaponsMountedSelected, shieldsMountedSelected);
        
        if(Controller.getInstance().getUIversion().getCurrentStation().getHangar() != null){
            hangar.getSelectedInHangar(weaponsSelectedInHangar, shieldsSelectedInHangar);
            Controller.getInstance().discard(Controller.HANGAR, weaponsSelectedInHangar, shieldsSelectedInHangar);
        }
        MainView.getInstance().updateView();
    }//GEN-LAST:event_discardButtonActionPerformed

    private void discardHangarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardHangarButtonActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Se ha descartado el hangar completo", MainView.getInstance().getAppName(), JOptionPane.INFORMATION_MESSAGE);
        Controller.getInstance().discardHangar();
        
        MainView.getInstance().updateView();
    }//GEN-LAST:event_discardHangarButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SpaceStationLabel;
    private javax.swing.JPanel damagePanel;
    private javax.swing.JButton discardButton;
    private javax.swing.JButton discardHangarButton;
    private javax.swing.JLabel firePower;
    private javax.swing.JLabel firePowerLabel;
    private javax.swing.JLabel fuelUnits;
    private javax.swing.JLabel fuelUnitsLabel;
    private javax.swing.JPanel hangarPanel;
    private javax.swing.JLabel medals;
    private javax.swing.JLabel medalsLabel;
    private javax.swing.JButton mountButton;
    private javax.swing.JScrollPane scrollShields;
    private javax.swing.JScrollPane scrollWeapons;
    private javax.swing.JLabel shieldPower;
    private javax.swing.JLabel shieldPowerLabel;
    private javax.swing.JPanel shieldsPanel;
    private javax.swing.JPanel weaponsPanel;
    // End of variables declaration//GEN-END:variables
}
