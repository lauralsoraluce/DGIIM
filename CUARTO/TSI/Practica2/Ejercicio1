set of int: POS = 0..12;
set of int: VALUES = 1..4;
array [POS] of var VALUES: regiones;
array [VALUES] of var int: precios = [100, 250, 350, 450];

constraint regiones[0] != regiones[1] /\ regiones[0] != regiones[2] /\ regiones[0] != regiones[8] /\ regiones[0] != regiones[11];
constraint regiones[1] != regiones[2] /\ regiones[1] != regiones[3] /\ regiones[1] != regiones[8] /\ regiones[1] != regiones[9];
constraint regiones[2] != regiones[4] /\ regiones[2] != regiones[6] /\ regiones[2] != regiones[7] /\ regiones[2] != regiones[8] /\ regiones[2] != regiones[9] /\ regiones[2] != regiones[10] /\ regiones[2] != regiones[11] /\ regiones[2] != regiones[12];
constraint regiones[3] != regiones[9];
constraint regiones[4] != regiones[5] /\ regiones[4] != regiones[9] /\
regiones[4] != regiones[12];
constraint regiones[5] != regiones[9];
constraint regiones[6] != regiones[10];
constraint regiones[7] != regiones[10] /\ regiones[7] != regiones[12];
constraint regiones[8] != regiones[11];

var int: total = sum(i in POS)(precios[regiones[i]]);
%constraint sum(i in POS)(precios[regiones[i]]) = 2900; % Para CSP

solve minimize total;
%solve satisfy; % Para CSP

% Cuantos colores como m√≠nimo hacen falta?
%var int: usados = card({regiones[i] | i in POS});
%solve minimize usados;