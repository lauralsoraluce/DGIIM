# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,by 0.02)
# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,by = 0.02)
length = length(x)
# a. Put names to the elements of x
names(x)<-paste("x_",1:length)
# b. Mean and standard deviation of x
mx<- mean(x)
sx<-sd(x)
# c. Find how many elements of x are above mx in more than two standard deviations
elements<-x[x>mx+2*sx]
print(elements)
# Replace them with NA
x[x > mx + 2 * sx] <- NA
# d. Compute again
new_mx <- mean(x, na.rm = TRUE)
new_varx <- var(x, na.rm = TRUE)
print(new_mx)
print(new_varx)
#Exercise 2
a<- -2
b<- 2
n<- 1000
h<- (b-a)/n
values<- seq(a,b,length.out = n+1)
f_x<-(x<(-1))*(1) + (-1<=x & x<0)*(log(x^2)) + (0<=x & x<1)*(log(x^2 + 1)) + (x>=1)*(2)
f_x
f_x[is.nan(f_x)]<-0
f_x
# Exercise 3
set.seed(1)
x<-rnorm(100,mean=160,sd=10)
# a. Compute the first and last quartiles using the function quantile.
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
# b. Create a factor with 3 levels, encoding the values in x
# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,by = 0.02)
length = length(x)
# a. Put names to the elements of x
names(x)<-paste("x_",1:length)
names
# b. Mean and standard deviation of x
mx<- mean(x)
sx<-sd(x)
# c. Find how many elements of x are above mx in more than two standard deviations
elements<-x[x>mx+2*sx]
print(elements)
# Replace them with NA
x[x > mx + 2 * sx] <- NA
# d. Compute again
new_mx <- mean(x, na.rm = TRUE)
new_varx <- var(x, na.rm = TRUE)
print(new_mx)
print(new_varx)
#Exercise 2
a<- -2
b<- 2
n<- 1000
h<- (b-a)/n
values<- seq(a,b,length.out = n+1)
f_x<-(x<(-1))*(1) + (-1<=x & x<0)*(log(x^2)) + (0<=x & x<1)*(log(x^2 + 1)) + (x>=1)*(2)
f_x
f_x[is.nan(f_x)]<-0
f_x
# Exercise 3
set.seed(1)
x<-rnorm(100,mean=160,sd=10)
# a. Compute the first and last quartiles using the function quantile.
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
# b. Create a factor with 3 levels, encoding the values in x
# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,by = 0.02)
length = length(x)
# a. Put names to the elements of x
names(x)<-paste("x_",1:length)
names(x)
# b. Mean and standard deviation of x
mx<- mean(x)
sx<-sd(x)
# c. Find how many elements of x are above mx in more than two standard deviations
elements<-x[x>mx+2*sx]
print(elements)
# Replace them with NA
x[x > mx + 2 * sx] <- NA
# d. Compute again
new_mx <- mean(x, na.rm = TRUE)
new_varx <- var(x, na.rm = TRUE)
print(new_mx)
print(new_varx)
#Exercise 2
a<- -2
b<- 2
n<- 1000
h<- (b-a)/n
values<- seq(a,b,length.out = n+1)
f_x<-(x<(-1))*(1) + (-1<=x & x<0)*(log(x^2)) + (0<=x & x<1)*(log(x^2 + 1)) + (x>=1)*(2)
f_x
f_x[is.nan(f_x)]<-0
f_x
# Exercise 3
set.seed(1)
x<-rnorm(100,mean=160,sd=10)
# a. Compute the first and last quartiles using the function quantile.
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
# b. Create a factor with 3 levels, encoding the values in x
# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,length.out = 50)
length = length(x)
# a. Put names to the elements of x
names(x)<-paste("x_",1:length)
names(x)
# b. Mean and standard deviation of x
mx<- mean(x)
sx<-sd(x)
# c. Find how many elements of x are above mx in more than two standard deviations
elements<-x[x>mx+2*sx]
print(elements)
# Replace them with NA
x[x > mx + 2 * sx] <- NA
# d. Compute again
new_mx <- mean(x, na.rm = TRUE)
new_varx <- var(x, na.rm = TRUE)
print(new_mx)
print(new_varx)
#Exercise 2
a<- -2
b<- 2
n<- 1000
h<- (b-a)/n
values<- seq(a,b,length.out = n+1)
f_x<-(x<(-1))*(1) + (-1<=x & x<0)*(log(x^2)) + (0<=x & x<1)*(log(x^2 + 1)) + (x>=1)*(2)
f_x
f_x[is.nan(f_x)]<-0
f_x
# Exercise 3
set.seed(1)
x<-rnorm(100,mean=160,sd=10)
# a. Compute the first and last quartiles using the function quantile.
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
# b. Create a factor with 3 levels, encoding the values in x
# Exercise 1:
# Create a vector with name x with a sequence of 50 equally-spaced values between 0 and 1.
x<-seq(0,1,length.out = 50)
length = length(x)
# a. Put names to the elements of x
names(x)<-paste("x_",1:length)
names(x)
# b. Mean and standard deviation of x
mx<- mean(x)
sx<-sd(x)
# c. Find how many elements of x are above mx in more than two standard deviations
elements<-x[x>mx+2*sx]
print(elements)
# Replace them with NA
x[x > mx + 2 * sx] <- NA
# d. Compute again
new_mx <- mean(x, na.rm = TRUE)
new_varx <- var(x, na.rm = TRUE)
print(new_mx)
print(new_varx)
#Exercise 2
a<- -2
b<- 2
n<- 1000
h<- (b-a)/n
values<- seq(a,b,length.out = n+1)
f_x<-(x<(-1))*(1) + (-1<=x & x<0)*(log(x^2)) + (0<=x & x<1)*(log(x^2 + 1)) + (x>=1)*(2)
f_x
f_x[is.nan(f_x)]<-0
f_x
# Exercise 3
set.seed(1)
x<-rnorm(100, mean=160, sd=10)
# a. Compute the first and last quartiles using the function quantile.
?quantile
quartiles <- quantile(x, probs = c(0.25, 0.75))
quartil_1 <- quartiles[1]
quartil_3 <- quartiles[2]
# b. Create a factor with 3 levels, encoding the values in x
x_factor <- cut(x, breaks = c(-Inf, quartil_1, quartil_3, Inf), labels = c("low", "medium", "high"))
# c. Generate a second vector y
y<-x-100+rnorm(100, mean = 0, sd = 1)
y
# d. Compute a summary of y for each level of the factor
summary_by_factor <- tapply(y, x_factor, summary)
print(summary_by_factor)
# EXERCISE 4.03.2025
# 1. Create two vectors (u1, u2) of length 10, consisting of random values from a u(0,1).
u1<-runif(10)
u2<-runif(10)
# 2. Create a matrix (M) with these two vectors as columns.
M<-cbind(u1, u2)
M
# 3. Add names to the columns "u1" and "u2"
# 4. Add one row at the bottom with  the means of the columns.
# 5. Add names to the rows: 1, ... 10, means
# EXERCISE 4.03.2025
# 1. Create two vectors (u1, u2) of length 10, consisting of random values from a u(0,1).
set.seed(1)
u1<-runif(10)
u2<-runif(10)
# 2. Create a matrix (M) with these two vectors as columns.
M<-cbind(u1, u2)
M
# 3. Add names to the columns "u1" and "u2"
# The names are already there but if they weren't, we could do colnames(M)<-c('u1','u2')
# 4. Add one row at the bottom with  the means of the columns.
M<-rbind(M,c(mean(u1),mean(u2)))
# 5. Add names to the rows: 1, ... 10, means
rownames(M)<-c(1:10,'means')
# EXERCISE 4.03.2025
# 1. Create two vectors (u1, u2) of length 10, consisting of random values from a u(0,1).
set.seed(1)
u1<-runif(10)
u2<-runif(10)
# 2. Create a matrix (M) with these two vectors as columns.
M<-cbind(u1, u2)
M
# 3. Add names to the columns "u1" and "u2"
# The names are already there but if they weren't, we could do colnames(M)<-c('u1','u2')
# 4. Add one row at the bottom with  the means of the columns.
M<-rbind(M,c(mean(u1),mean(u2)))
# 5. Add names to the rows: 1, ... 10, means
rownames(M)<-c(1:10,'means')
M
A<-matrix(1:0, 3:3)
B[B=NA]<-0
A<-matrix(1:0, 3:3)
A<-matrix(1:9, 3:3)
A<-matrix(1:9, 3:3)
A<-matrix(1:9, 3:3); A
B<-A; B
B[is.na(N)]<-0
A<-matrix(1:9, 3:3); A
B<-A; B
B[is.na(B)]<-0
A<-matrix(1:9, 3:3); A
B<-A; B
B[A>3]<-NA
B[is.na(B)]<-0
A<-matrix(1:9, 3:3); A
B<-A; B
B[A>3]<-NA; B
B[is.na(B)]<-0
A<-matrix(1:9, 3:3); A
B<-A; B
B[A>3]<-NA; B
B[is.na(B)]<-0; B
A<-matrix(c(3,5,2,4,-2,-2,-1,1,1),3,3)
A<-matrix(c(3,5,2,4,-2,-2,-1,1,1),3,3); A
A<-matrix(c(3,5,2,4,-2,-2,-1,1,1),3,3); A
b<-c(8,4,1)
A<-matrix(c(3,5,2,4,-2,-2,-1,1,1),3,3); A
b<-c(8,4,1); b
A<-matrix(c(3,5,2,4,-2,-2,-1,1,1),3,3); A
b<-c(8,4,1); b
solve(A,b)
A<-matrix(c(-3,1,4,2),2,2); A
b<-c(2,8)
A<-matrix(c(-3,1,4,2),2,2); A
b<-c(2,8); b
A<-matrix(c(-3,1,4,2),2,2); A
b<-c(2,8); b
solve(A,b)
A<-matrix(1:4, 2:2)
A<-matrix(1:4, 2:2); A
A<-matrix(1:4, 1:4); A
matrix(rep(1:4), times=4)^rep(0:3,each=4),4,4)
matrix(rep(1:4, times=4)^rep(0:3,each=4),4,4)
outer(1:4,0:3,'^')
outer(1:4,0:3,'^')
outer(1:4,0:3,'^')
outer(1:100,0:3,'^')
outer(1:100,0:99,'^')
options(max.print=100000)
outer(1:100,0:99,'^')
A<-matrix(1:9,3,3)
A<-matrix(1:9,3,3); A
x<-1:3
A<-matrix(1:9,3,3)
x<-1:3
A%*%x
x%*%A
A%*%t(x)
t(x)%*%A
t(x)%*%x
t(x)%*%A
x%*%A # Gives a row
t(x)%*%x # Gives a sigle number
---
title: "trial"
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(rmarkdown) render('trial_markdown.Rmd')
library(rmarkdown) render('trial_markdown.Rmd')
library(rmarkdown)
render('trial_markdown.Rmd')
setwd("~/Escritorio/DGIIM/QUINTO/COMPUTATIONAL/p1")
render('trial_markdown.Rmd')
render('trial_markdown.Rmd', clean=FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
